{"version":3,"sources":["components/Posts.js","actions/postAction.js","actions/types.js","components/Postform.js","reducers/postReducer.js","reducers/index.js","store.js","App.js","serviceWorker.js","index.js"],"names":["Posts","this","props","fetchPosts","nextProps","nextContext","newPost","posts","unshift","postItems","map","post","react_default","a","createElement","key","id","title","body","Component","connect","state","items","item","dispatch","fetch","then","res","json","type","payload","PostForm","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","onChange","e","console","log","setState","defineProperty","target","name","value","onSubmit","preventDefault","createPosts","propTyps","createPost","PropTypes","func","isRequired","postData","method","headers","content-type","JSON","stringify","initialState","combineReducers","arguments","length","undefined","action","objectSpread","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","apply","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","className","Postform","components_Posts","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca46aa1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport { connect } from \"react-redux\";\r\nimport { fetchPosts } from '../actions/postAction';\r\nclass Posts extends Component {\r\n    componentWillMount () {\r\n        this.props.fetchPosts();\r\n    }\r\n    componentWillReceiveProps ( nextProps, nextContext ) {\r\n        if(nextProps.newPost) {\r\n            this.props.posts.unshift(nextProps.newPost)\r\n        }\r\n    }\r\n\r\n    render () {\r\n        const postItems = this.props.posts.map(post => (\r\n            <div key={post.id}>\r\n                <h3>{post.title}</h3>\r\n                <p>{post.body}</p>\r\n            </div>\r\n        ));\r\n        return (\r\n            <div>\r\n                <h1>Posts</h1>\r\n                {postItems}\r\n            </div>\r\n        );\r\n    }\r\n}\r\nPosts.propTypes = {\r\n  fetchPosts: PropTypes.func.isRequired,\r\n  posts: PropTypes.array.isRequired,\r\n  newPost: PropTypes.object\r\n};\r\nconst mapStateToProps = state => ({\r\n  posts: state.posts.items,\r\n    newPost: state.posts.item\r\n});\r\nexport default connect(mapStateToProps, { fetchPosts })(Posts);\r\n","import { FETCH_POSTS, NEW_POST } from \"./types\";\r\n\r\nexport const fetchPosts = () => dispatch => {\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n        .then(res => res.json())\r\n        .then(posts => dispatch({\r\n            type:FETCH_POSTS,\r\n            payload: posts\r\n        }));\r\n};\r\n\r\nexport const createPosts = (postData) => dispatch => {\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/posts', {\r\n        method: 'POST',\r\n        headers: {\r\n            'content-type': 'application/json'\r\n        },\r\n        body: JSON.stringify(postData)\r\n    })\r\n        .then(res => res.json())\r\n        .then(posts => dispatch({\r\n            type:NEW_POST,\r\n            payload: postData\r\n        }));\r\n};\r\n\r\n// https://www.youtube.com/watch?v=93p3LxR9xfM\r\n","export const FETCH_POSTS = 'FETCH_POSTS';\r\nexport const NEW_POST = 'NEW_POST';\r\n","import React, { Component } from 'react';\r\nimport { connect} from \"react-redux\";\r\nimport PropTypes from 'prop-types';\r\nimport { createPosts } from \"../actions/postAction\";\r\n\r\nclass PostForm extends Component {\r\n    constructor (props) {\r\n        super(props);\r\n        this.state = {\r\n            title: '',\r\n            body: ''\r\n        };\r\n    }\r\n\r\n    onChange = (e) => {\r\n        console.log(e);\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        });\r\n    };\r\n    onSubmit = (e) => {\r\n        e.preventDefault();\r\n        const post = {\r\n            title: this.state.title,\r\n            body: this.state.body\r\n        };\r\n\r\n        this.props.createPosts(post);\r\n        /*fetch('https://jsonplaceholder.typicode.com/posts', {\r\n            method: 'POST',\r\n            headers: {\r\n                'content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify(post)\r\n        })\r\n            .then( res => res.json())\r\n            .then(data => console.log(data))*/\r\n    };\r\n    render () {\r\n\r\n        return (\r\n            <div>\r\n                <h1>Add Post</h1>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div>\r\n                        <label> Title: </label>\r\n                        <input type=\"text\"  name=\"title\" onChange={this.onChange} value={this.state.title}/>\r\n                    </div>\r\n                    <div>\r\n                        <label> Body: </label>\r\n                        <input type=\"text\" name=\"body\" onChange={this.onChange} value={this.state.body}/>\r\n                    </div>\r\n                    <button type=\"submit\">Submit</button>\r\n\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nPostForm.propTyps = {\r\n    createPost: PropTypes.func.isRequired\r\n};\r\nexport default connect(null, { createPosts })(PostForm);\r\n","import { FETCH_POSTS, NEW_POST } from \"../actions/types\";\r\n\r\nconst initialState = {\r\n    items: [],\r\n    item: {}\r\n};\r\nexport default function (state = initialState, action ) {\r\n    switch (action.type) {\r\n        case FETCH_POSTS:\r\n            return {\r\n                ...state,\r\n                items: action.payload\r\n            };\r\n        case NEW_POST:\r\n            return {\r\n              ...state,\r\n              item: action.payload\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport postReducer from './postReducer';\r\n\r\nexport default combineReducers({\r\n    posts: postReducer\r\n})\r\n","import { applyMiddleware, createStore, compose } from \"redux\";\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers'\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    compose(\r\n        applyMiddleware(...middleware)\r\n        ,\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    )\r\n\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\nimport Posts from './components/Posts';\r\nimport PostForm from './components/Postform';\r\nimport store from './store';\r\n\r\nfunction App() {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n         <PostForm/>\r\n          <div className='hBorder'>&nbsp;</div>\r\n          <Posts/>\r\n        </header>\r\n      </div>\r\n    </Provider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}